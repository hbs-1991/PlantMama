"""Telegram bot handler."""

import logging
import io
from typing import Optional
import speech_recognition as sr

from telegram import (
    Update, 
    BotCommand,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from config.settings import settings
from core.agent import PlantCareAgent
from services.image_processing import ImageProcessor

logger = logging.getLogger(__name__)


class TelegramBot:
    """Telegram bot handler for PlantCare Agent."""
    
    def __init__(self, agent: PlantCareAgent):
        """
        Initialize Telegram bot.
        
        Args:
            agent: PlantCare agent instance
        """
        self.agent = agent
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.application: Optional[Application] = None
        
    async def start(self) -> None:
        """Start the Telegram bot."""
        # Create application
        self.application = Application.builder().token(self.token).build()
        
        # Register handlers
        self._register_handlers()
        
        # Set bot commands
        await self._set_bot_commands()
        
        # Start polling
        await self.application.run_polling()

        
        logger.info("Telegram bot started successfully")

    async def stop(self) -> None:
        """Stop the Telegram bot."""
        if self.application:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            
        logger.info("Telegram bot stopped")
    
    def _register_handlers(self) -> None:
        """Register command and message handlers."""
        self.application.add_handler(CommandHandler("start", self.handle_start))
        self.application.add_handler(CommandHandler("help", self.handle_help))
        self.application.add_handler(CommandHandler("my_plants", self.handle_my_plants))
        
        # Photo handler
        self.application.add_handler(
            MessageHandler(filters.PHOTO, self.handle_photo)
        )
        
        # Text message handler
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text)
        )
        
        # Voice message handler
        self.application.add_handler(
            MessageHandler(filters.VOICE, self.handle_voice)
        )
        
        # Callback query handler for inline keyboards
        self.application.add_handler(
            CallbackQueryHandler(self.handle_callback_query)
        )
    
    async def _set_bot_commands(self) -> None:
        """Set bot commands for the menu."""
        commands = [
            BotCommand("start", "Start the bot"),
            BotCommand("help", "Show help information"),
            BotCommand("my_plants", "View your plants"),
        ]
        await self.application.bot.set_my_commands(commands)
    
    async def handle_start(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Handle /start command."""
        user = update.effective_user
        welcome_message = f"""
üå±üå± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlantMama AI, {user.first_name}!

–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ:
‚Ä¢ üîç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ üåø –û–ø–æ–∑–Ω–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ üíö –î–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É
‚Ä¢ üìÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —É—Ö–æ–¥—É

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –∑–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏!

–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
        """
        await update.message.reply_text(
            welcome_message,
            reply_markup=self._get_main_keyboard()
        )
    
    async def handle_help(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Handle /help command."""
        help_text = """
üìö **PlantMama AI ‚Äî –°–ø—Ä–∞–≤–∫–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
/start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/my\_plants ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ üí¨ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏
‚Ä¢ üå± –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –≤–∞—à–∏–º —Ä–∞—Å—Ç–µ–Ω–∏–µ–º

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ ¬´–ü–æ—á–µ–º—É —É –º–æ–µ–π –º–æ–Ω—Å—Ç–µ—Ä—ã –∂–µ–ª—Ç–µ—é—Ç –ª–∏—Å—Ç—å—è?¬ª
‚Ä¢ ¬´–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª–∏–≤–∞—Ç—å —Å—É–∫–∫—É–ª–µ–Ω—Ç—ã?¬ª
‚Ä¢ ¬´–ö–∞–∫–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ –ª—É—á—à–µ –¥–ª—è –æ—Ä—Ö–∏–¥–µ–π?¬ª

**–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —á—ë—Ç–∫–∏–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ–± –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã!
        """
        await update.message.reply_text(help_text, parse_mode="Markdown")
    
    async def handle_my_plants(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Handle /my_plants command."""
        user_id = str(update.effective_user.id)
        
        # Get user's plants from agent
        response = await self.agent.process_message(
            message="Show me my registered plants",
            user_id=user_id,
        )
        
        await update.message.reply_text(response)

    async def handle_voice(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Handle voice messages."""
        user_id = str(update.effective_user.id)

        try:
            # Send typing indicator
            await update.message.chat.send_action("typing")

            # Download voice file
            voice_file = await update.message.voice.get_file()
            voice_bytes = await voice_file.download_as_bytearray()

            # Convert voice to text (placeholder - in production use OpenAI Whisper)
            text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è."

            # For now, inform user about the limitation
            await update.message.reply_text(
                "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\n\n" + text
            )

        except Exception as e:
            logger.error(f"Error processing voice message: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def _get_main_keyboard(self) -> InlineKeyboardMarkup:
        """Get main inline keyboard."""
        keyboard = [
            [
                InlineKeyboardButton("üì∏ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ", callback_data="action_photo"),
                InlineKeyboardButton("üåø –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="action_my_plants")
            ],
            [
                InlineKeyboardButton("üí° –°–æ–≤–µ—Ç –¥–Ω—è", callback_data="action_tip"),
                InlineKeyboardButton("üìö –≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è", callback_data="action_encyclopedia")
            ],
            [
                InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="action_reminders"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="action_help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def handle_callback_query(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Handle callback queries from inline keyboards."""
        query = update.callback_query
        user_id = str(query.from_user.id)
        
        # Answer callback query to remove loading state
        await query.answer()
        
        # Handle different actions
        if query.data == "action_photo":
            await query.edit_message_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è –ø—Ä–æ–≤–µ–¥—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É!\n\n"
                "–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
                "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                "‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º\n"
                "‚Ä¢ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ"
            )
        
        elif query.data == "action_my_plants":
            response = await self.agent.process_message(
                message="–ü–æ–∫–∞–∂–∏ –º–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è",
                user_id=user_id,
            )
            await query.edit_message_text(response)
        
        elif query.data == "action_tip":
            response = await self.agent.process_message(
                message="–î–∞–π —Å–æ–≤–µ—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                user_id=user_id,
            )
            await query.edit_message_text(
                f"üí° **–°–æ–≤–µ—Ç –¥–Ω—è**\n\n{response}",
                parse_mode="Markdown"
            )
        
        elif query.data == "action_encyclopedia":
            await query.edit_message_text(
                "üìö **–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π**\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –æ –Ω–µ–º –≤—Å—ë:\n"
                "‚Ä¢ –ù–∞—É—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è\n"
                "‚Ä¢ –£—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è\n"
                "‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É—Ö–æ–¥–∞\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: _–ú–æ–Ω—Å—Ç–µ—Ä–∞_, _–§–∏–∫—É—Å_, _–û—Ä—Ö–∏–¥–µ—è_",
                parse_mode="Markdown"
            )
        
        elif query.data == "action_reminders":
            await query.edit_message_text(
                "‚è∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏**\n\n"
                "–Ø –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ:\n"
                "‚Ä¢ –ü–æ–ª–∏–≤–µ —Ä–∞—Å—Ç–µ–Ω–∏–π\n"
                "‚Ä¢ –ü–æ–¥–∫–æ—Ä–º–∫–µ\n"
                "‚Ä¢ –ü–µ—Ä–µ—Å–∞–¥–∫–µ\n"
                "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π\n\n"
                "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "_–ù–∞–ø–æ–º–Ω–∏ –ø–æ–ª–∏—Ç—å –º–æ–Ω—Å—Ç–µ—Ä—É —á–µ—Ä–µ–∑ 3 –¥–Ω—è_",
                parse_mode="Markdown"
            )
        
        elif query.data == "action_help":
            help_text = self._get_help_text()
            await query.edit_message_text(help_text, parse_mode="Markdown")
        
        # Plant-specific actions
        elif query.data.startswith("plant_"):
            action = query.data.split("_")[1]
            plant_id = query.data.split("_")[2]
            
            if action == "water":
                response = await self.agent.process_message(
                    message=f"–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –ø–æ–ª–∏–≤ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è {plant_id}",
                    user_id=user_id,
                )
                await query.edit_message_text(response)
            
            elif action == "diagnose":
                await query.edit_message_text(
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è #{plant_id} –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
                )
    
    def _get_help_text(self) -> str:
        """Get help text."""
        return """
üìö **PlantMama AI ‚Äî –°–ø—Ä–∞–≤–∫–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/my\_plants ‚Äî –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üì∏ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ üíö –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É
‚Ä¢ üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ
‚Ä¢ üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
2. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–± —É—Ö–æ–¥–µ
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ü–æ—á–µ–º—É –∂–µ–ª—Ç–µ—é—Ç –ª–∏—Å—Ç—å—è?"
‚Ä¢ "–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª–∏–≤–∞—Ç—å —Ñ–∏–∫—É—Å?"
‚Ä¢ "–ß—Ç–æ –∑–∞ –ø—è—Ç–Ω–∞ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö?"

üí° *–°–æ–≤–µ—Ç*: –î–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏!
        """
    
    async def handle_photo(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Handle photo messages."""
        user_id = str(update.effective_user.id)
        
        try:
            # Send typing indicator
            await update.message.chat.send_action("typing")
            
            # Get the largest photo
            photo_file = await update.message.photo[-1].get_file()
            photo_bytes = await photo_file.download_as_bytearray()
            
            # Validate image
            processor = ImageProcessor()
            is_valid, error_msg = await processor.validate_plant_image(bytes(photo_bytes))
            
            if not is_valid:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{error_msg}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                    "‚Ä¢ –ù–∞ —Ñ–æ—Ç–æ –µ—Å—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\n"
                    "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω–æ–µ\n"
                    "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10MB"
                )
                return
            
            # Process image
            processed_image, metadata = await processor.process_image(bytes(photo_bytes))
            
            # Save image for user
            image_path = await processor.save_image(
                processed_image,
                user_id=user_id
            )
            
            # Get caption if any
            caption = update.message.caption or ""
            
            # Notify about processing
            await update.message.reply_text(
                "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            
            # Process with agent
            response = await self.agent.analyze_plant_image(
                image_data=processed_image,
                user_id=user_id,
                additional_info=caption,
            )
            
            # Send response with action buttons
            plant_keyboard = [
                [
                    InlineKeyboardButton("üíß –ì—Ä–∞—Ñ–∏–∫ –ø–æ–ª–∏–≤–∞", callback_data="plant_water_new"),
                    InlineKeyboardButton("üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–≥–Ω–æ–∑", callback_data="plant_save_new")
                ],
                [
                    InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="action_photo"),
                    InlineKeyboardButton("üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="action_menu")
                ]
            ]
            
            await update.message.reply_text(
                response,
                reply_markup=InlineKeyboardMarkup(plant_keyboard),
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"Error handling photo: {e}", exc_info=True)
            await update.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
    
    async def handle_text(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Handle text messages."""
        user_id = str(update.effective_user.id)
        message = update.message.text
        
        # Send typing indicator
        await update.message.chat.send_action("typing")
        
        # Process with agent
        response = await self.agent.process_message(
            message=message,
            user_id=user_id,
        )
        
        await update.message.reply_text(response)
